<?php
	use Longman\TelegramBot\Request;

	function handleMetrics($checks) {
		return function ($request, $response) use ($checks) {
        	        $registry = new Prometheus\CollectorRegistry(new Prometheus\Storage\InMemory());
	                foreach ($checks as $check) {
                        	$gauge = $registry->getOrRegisterGauge('bizaccount', 'status', $check->getName(), ['name']);
                	        $gauge->set($check->call(), [$check->getName()]);
        	        }

	                $renderer = new Prometheus\RenderTextFormat();

                	return $response->withHeader('Content-Type', Prometheus\RenderTextFormat::MIME_TYPE)->write(trim($renderer->render($registry->getMetricFamilySamples())));
        	};
	}

	function handleAlert(SQLite3 $db) {
		return function ($request, $response) use ($db) {
	                $result = json_decode((string)$request->getBody(), true);
        	        if ($result['status'] == 'firing') {
                	        $text = "<b>–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã:</b>\n";
                        	foreach ($result['alerts'] as $alert) {
                                	$text .= '<code>' . $alert['annotations']['description'] . "</code>\n";
                        	}
                	} else {
                        	$text = "<b>–£—Ä–∞–∞, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å—Ç—Ä–æ–π:</b>\n";
                        	foreach ($result['alerts'] as $alert) {
                                	$text .= '<code>' . $alert['annotations']['summary'] . "</code>\n";
                        	}
                	}
			$results = $db->query('SELECT * FROM subscription');
			while ($row = $results->fetchArray()) {
				$data['chat_id'] = $row['chat_id'];
				$data['text'] = $text;
				$data['parse_mode'] = 'HTML';
				Request::sendMessage($data);				
			}
			
                	return $response->write('ok');
		};
	}

	function handleHook(SQLite3 $db) {
		return function ($request, $response) use ($db) {
			$body = json_decode((string)$request->getBody(), true);
			$type = null;
			$alias = null;
			if (isset($body['message']['text'])) {
				$type = $body['message']['text'];
			} elseif (isset($body['callback_query'])) {
				list($type, $alias) = explode(' ', $body['callback_query']['data']);
			}
			switch ($type) {
				case '/start':
					Request::sendMessage(getDataForSendStartMessage($db, $body, $type, $alias));
					break;
				case '/killservice':
	               	        	Request::sendMessage(getDataForSendKillServiceMessage($db, $body, $type, $alias));
					break;
				case '/rebornservice':
	                	        Request::sendMessage(getDataForSendRebornServiceMessage($db, $body, $type, $alias));
					break;
				case '/stop':
                               		Request::sendMessage(getDataForSendStopMessage($db, $body, $type, $alias));
					break;
				case '/help':
					Request::sendMessage(getDataForSendHelpMessage($db, $body, $type, $alias));
					break;
				case '/feedback':
					Request::sendMessage(getDataForSendFeedbackMessage($db, $body, $type, $alias));
					break;
				case '/services':
	                         	Request::sendMessage(getDataForSendServicesMessage($db, $body, $type, $alias));
					break;
			} 
		};
	}
	function getDataForSendStartMessage(SQLite3 $db, $body, $type, $alias) {
		$smt = $db->prepare("SELECT COUNT(*) AS count FROM subscription WHERE chat_id = :chat_id");
                $smt->bindValue(':chat_id', $body['message']['chat']['id'], SQLITE3_TEXT);
                $result = $smt->execute();
		if ($result->fetchArray()['count']) {
	                return [
        	        	'chat_id' => $body['message']['chat']['id'],
                	        'text' => '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–æ–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üòâ',
	               	];
		}
	
		$smt = $db->prepare("INSERT INTO subscription (chat_id) values (:chat_id)");
              	$smt->bindValue(':chat_id', $body['message']['chat']['id'], SQLITE3_TEXT);
                $smt->execute();
                return [
                	'chat_id' => $body['message']['chat']['id'],
             	        'text' => '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ—Å—Ç–∏! –Ø - –±–æ—Ç —Ä–æ–¥–æ–º –∏–∑ –õ–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ 2–ì–ò–°. –Ø —É–º–µ—é –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤  –∏ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üòä',
            	];
	}	

	function getDataForSendKillServiceMessage(SQLite3 $db, $body, $type, $alias) {
		if ($alias) {   
           		$errorCodes = [400, 401, 403, 404, 500, 502, 503];
                      	shuffle($errorCodes);
                        $smt = $db->prepare("UPDATE service SET response_code = :response_code WHERE alias = :alias");
                        $smt->bindValue(':response_code', $errorCodes[0], SQLITE3_TEXT);
                        $smt->bindValue(':alias', $alias, SQLITE3_TEXT);
                        $smt->execute();
                        return [
                        	'chat_id' => $body['callback_query']['message']['chat']['id'],
                                'text' => 'C–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –º–∏—Ä –æ–± —ç—Ç–æ–º —É–∑–Ω–∞–µ—Ç.',
                        ];
		}
                        
                $inlineKeyboard = [];
                $results = $db->query('SELECT * FROM service WHERE response_code = "200"');
                while ($row = $results->fetchArray()) { 
                     	$inlineKeyboard[] = [['text' => $row['name'], 'callback_data' => $type . ' ' . $row['alias']]];
                }
                if ($inlineKeyboard) {
                      	return [
             			'chat_id' => $body['message']['chat']['id'],
                                'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∂–∏–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                                'reply_markup' => ['inline_keyboard' => $inlineKeyboard],
                   	];
		}
               	return [
               		'chat_id' => $body['message']['chat']['id'],
               		'text' => '–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ–Ω—É–∂–Ω–æ–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ–Ω—É–∂–Ω–æ–µ, –∞ —É –Ω–∞—Å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏ —Ç–∞–∫ –ª–µ–∂–∞—Ç. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /rebornservice',      
          	];
	}

	function getDataForSendRebornServiceMessage(SQLite3 $db, $body, $type, $alias) {
		if ($alias) {
	       		$smt = $db->prepare("UPDATE service SET response_code = :response_code WHERE alias = :alias");
        	     	$smt->bindValue(':response_code', 200, SQLITE3_TEXT);
                  	$smt->bindValue(':alias', $alias, SQLITE3_TEXT);
                    	$smt->execute();
                        return [
                 		'chat_id' => $body['callback_query']['message']['chat']['id'],
                         	'text' => '–°–∫–æ—Ä–æ –≤—Å–µ —É–∑–Ω–∞—é—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤ —Ä–∞–±–æ—Ç–µ. –°–ø–∞—Å–∏–±–æ üòâ',
                     	];
           	}

          	$inlineKeyboard = [];
         	$results = $db->query('SELECT * FROM service WHERE response_code != "200"');
                while ($row = $results->fetchArray()) {
           		$inlineKeyboard[] = [['text' => $row['name'], 'callback_data' => $type . ' ' . $row['alias']]];
  		}
          	if ($inlineKeyboard) {
            		return [
                       		'chat_id' => $body['message']['chat']['id'],
                                'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ—Ç—É—à–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                                'reply_markup' => ['inline_keyboard' => $inlineKeyboard],
                      	];
		}
                        
                return [
        		'chat_id' => $body['message']['chat']['id'],
              	  	'text' => '–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ —Å—Ç—Ä–æ—é, –Ω–æ –º–æ–∂–Ω–æ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –ø–æ—Ç—É—à–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /killservice',
           	];
	}

	function getDataForSendStopMessage(SQLite3 $db, $body, $type, $alias) {
		$smt = $db->prepare("DELETE FROM subscription WHERE chat_id = :chat_id");
              	$smt->bindValue(':chat_id', $body['message']['chat']['id'], SQLITE3_TEXT);
             	$smt->execute();

              	return [
             		'chat_id' => $body['message']['chat']['id'],
           		'text' => '–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ üòâ',
         	];
	}
	
	function getDataForSendHelpMessage(SQlite3 $db, $body, $type, $alias) {
		return [
			'chat_id' => $body['message']['chat']['id'],
                   	'text' => '–õ–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º –ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü—ã —Ñ–∏—Ä–º –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏—Ä–º–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–¥ –∫–∞–ø–æ—Ç–æ–º –º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å 20-30 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏, –∏ –≤ —Å–ª—É—á–∞–µ —Ñ–∞–∫–∞–ø–æ–≤ –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, –Ω–∞ —á—å–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ–±–ª–µ–º–∞. –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telegram. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è —É–º–µ—é —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–æ–º–∫—É —Å–µ—Ä–≤–∏—Å–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /killservice –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤. –ù–∏–∫–∞–∫–∏–µ –±–æ–µ–≤—ã–µ –º–∞—à–∏–Ω—ã –Ω–µ —Å—Ç—Ä–∞–¥–∞—é—Ç üòä'
          	];
	}
	
	function getDataForSendFeedbackMessage(SQLite3 $db, $body, $type, $alias) {
		return	[
             		'chat_id' => $body['message']['chat']['id'],
            		'text' => '–ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å - –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Ç —Å—é–¥–∞:
–¢–µ–ª–µ–≥—Ä–∞–º: @andynador
email: a.litunenko@2gis.ru'
      		];
	}
	
	function getDataForSendServicesMessage(SQLite3 $db, $body, $type, $alias) {
		if ($alias) {
			$smt = $db->prepare("SELECT * FROM service WHERE alias = :alias");
	        	$smt->bindValue(':alias', $alias, SQLITE3_TEXT);
        	    	$result = $smt->execute();
                	return [
	               		'chat_id' => $body['callback_query']['message']['chat']['id'],
        	         	'text' => $result->fetchArray()['info'],
          		];
	      	}
   		$inlineKeyboard = [];
	    	$results = $db->query('SELECT * FROM service');
     		while ($row = $results->fetchArray()) {
	      		$inlineKeyboard[] = [['text' => $row['name'], 'callback_data' => $type . ' ' . $row['alias']]];
 		}
	
	        return [
      			'chat_id' => $body['message']['chat']['id'],
  			'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤',
	         	'reply_markup' => ['inline_keyboard' => $inlineKeyboard],
   		];
	}
